# GitLab CI/CD Pipeline para Release Manager
# Este arquivo deve ser colocado na raiz do repositório

stages:
  - build
  - test
  - package
  - deploy
  - notify-release

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  RELEASE_MANAGER_API: "${RELEASE_MANAGER_URL}/api/pipeline/v1/releases"

# Cache para dependências Maven e Node
cache:
  paths:
    - .m2/repository/
    - frontend/node_modules/

# Build Backend
build-backend:
  stage: build
  image: maven:3.9-openjdk-21
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS clean compile
  artifacts:
    paths:
      - backend/target/
    expire_in: 1 hour

# Build Frontend
build-frontend:
  stage: build
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour

# Test Backend
test-backend:
  stage: test
  image: maven:3.9-openjdk-21
  services:
    - postgres:17-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
    DATABASE_URL: jdbc:postgresql://postgres:5432/test_db
    DATABASE_USER: test
    DATABASE_PASSWORD: test
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS test
  dependencies:
    - build-backend
  artifacts:
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
    paths:
      - backend/target/site/jacoco/
    expire_in: 1 week

# Test Frontend
test-frontend:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm run test -- --watch=false --browsers=ChromeHeadless
  dependencies:
    - build-frontend
  artifacts:
    reports:
      junit:
        - frontend/coverage/junit.xml
    paths:
      - frontend/coverage/
    expire_in: 1 week

# Package Backend
package-backend:
  stage: package
  image: maven:3.9-openjdk-21
  script:
    - cd backend
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  dependencies:
    - test-backend
  artifacts:
    paths:
      - backend/target/*.jar
    expire_in: 1 day

# Package Frontend
package-frontend:
  stage: package
  image: node:18-alpine
  script:
    - cd frontend
    - npm ci
    - npm run build
    - tar -czf release-manager-frontend-${CI_COMMIT_TAG}.tar.gz -C dist .
  dependencies:
    - test-frontend
  artifacts:
    paths:
      - frontend/release-manager-frontend-${CI_COMMIT_TAG}.tar.gz
    expire_in: 1 day
  only:
    - tags

# Build Docker Images
build-docker-images:
  stage: package
  image: docker:24
  services:
    - docker:24-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Build backend image
    - cd backend
    - docker build -f src/main/docker/Dockerfile.jvm -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_TAG
    
    # Build frontend image
    - cd ../frontend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_TAG
  dependencies:
    - package-backend
    - package-frontend
  only:
    - tags

# Deploy to Staging
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      # Deploy using docker-compose
      scp docker-compose.prod.yml $STAGING_SERVER:/opt/release-manager/
      ssh $STAGING_SERVER "cd /opt/release-manager && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
  environment:
    name: staging
    url: https://staging.releasemanager.company.com
  dependencies:
    - build-docker-images
  only:
    - main

# Deploy to Production
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      # Deploy to production
      scp docker-compose.prod.yml $PRODUCTION_SERVER:/opt/release-manager/
      ssh $PRODUCTION_SERVER "cd /opt/release-manager && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
  environment:
    name: production
    url: https://releasemanager.company.com
  dependencies:
    - build-docker-images
  when: manual
  only:
    - tags

# Notificar Release Manager sobre nova versão
notify-release-manager:
  stage: notify-release
  image: curlimages/curl:latest
  script:
    - |
      # Extrair informações da tag
      PRODUCT_NAME="Sistema Principal"
      VERSION=${CI_COMMIT_TAG}
      
      if [ -n "$VERSION" ]; then
        echo "Notificando Release Manager sobre versão $VERSION"
        curl -X POST "$RELEASE_MANAGER_API" \
          -H "Content-Type: application/json" \
          -d "{
            \"productName\": \"$PRODUCT_NAME\",
            \"version\": \"$VERSION\"
          }"
        
        if [ $? -eq 0 ]; then
          echo "Release $VERSION registrada com sucesso no Release Manager"
        else
          echo "Erro ao registrar release no Release Manager"
          exit 1
        fi
      else
        echo "Nenhuma tag encontrada, pulando notificação"
      fi
  dependencies:
    - deploy-production
  only:
    - tags
  when: on_success

# Configurações de segurança e compliance
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml