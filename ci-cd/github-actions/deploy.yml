# GitHub Actions Workflow para Release Manager
# Arquivo: .github/workflows/deploy.yml

name: Build, Test and Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RELEASE_MANAGER_API: ${{ secrets.RELEASE_MANAGER_URL }}/api/pipeline/v1/releases

jobs:
  # Job de Build e Test
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build Backend
      run: |
        cd backend
        mvn clean compile
    
    - name: Test Backend
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
      run: |
        cd backend
        mvn test
    
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Test Frontend
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/target/surefire-reports/
          frontend/coverage/
    
    - name: Package Backend
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd backend
        mvn package -DskipTests
    
    - name: Package Frontend
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd frontend
        npm run build
        tar -czf release-manager-frontend-${{ github.ref_name }}.tar.gz -C dist .
    
    - name: Upload artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          backend/target/*.jar
          frontend/release-manager-frontend-*.tar.gz

  # Job de Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/src/main/docker/Dockerfile.jvm
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}

  # Job de Deploy para Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://staging.releasemanager.company.com
    
    steps:
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment"
        # Aqui você adicionaria os comandos específicos para deploy
        # Por exemplo, usando SSH para executar comandos no servidor
        
  # Job de Deploy para Produção
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    environment:
      name: production
      url: https://releasemanager.company.com
    
    steps:
    - name: Deploy to Production
      run: |
        echo "Deploying version ${{ github.ref_name }} to production"
        # Comandos de deploy para produção
        
  # Job para notificar o Release Manager
  notify-release-manager:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/') && success()
    
    steps:
    - name: Notify Release Manager
      run: |
        VERSION="${{ github.ref_name }}"
        PRODUCT_NAME="Sistema Principal"
        
        echo "Notifying Release Manager about version $VERSION"
        
        curl -X POST "${{ env.RELEASE_MANAGER_API }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"productName\": \"$PRODUCT_NAME\",
            \"version\": \"$VERSION\"
          }"
        
        if [ $? -eq 0 ]; then
          echo "Release $VERSION registered successfully in Release Manager"
        else
          echo "Error registering release in Release Manager"
          exit 1
        fi

  # Job de Notificação
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, notify-release-manager]
    if: always() && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Notify Slack on Success
      if: ${{ needs.deploy-production.result == 'success' && needs.notify-release-manager.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Release ${{ github.ref_name }} deployed successfully to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on Failure
      if: ${{ needs.deploy-production.result == 'failure' || needs.notify-release-manager.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Deployment failed for release ${{ github.ref_name }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}