version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: release-manager-postgres
    environment:
      POSTGRES_DB: releasemanager
      POSTGRES_USER: ${DB_USER:-releasemanager}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-releasemanager123}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-releasemanager}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - release-manager

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: release-manager-keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: ${DB_USER:-releasemanager}
      KC_DB_PASSWORD: ${DB_PASSWORD:-releasemanager123}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
    ports:
      - "${KEYCLOAK_PORT:-8180}:8080"
    volumes:
      - ./infrastructure/keycloak:/opt/keycloak/data/import
      - keycloak_data:/opt/keycloak/data
    command:
      - start
      - --import-realm
      - --optimized
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - release-manager

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: release-manager-backend:latest
    container_name: release-manager-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: releasemanager
      DB_USER: ${DB_USER:-releasemanager}
      DB_PASSWORD: ${DB_PASSWORD:-releasemanager123}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: releasemanager
      KEYCLOAK_CLIENT_ID: release-manager-backend
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-secret}
      AZURE_STORAGE_ACCOUNT_NAME: ${AZURE_STORAGE_ACCOUNT_NAME:-devstorageaccount1}
      AZURE_STORAGE_ACCOUNT_KEY: ${AZURE_STORAGE_ACCOUNT_KEY:-Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==}
      AZURE_STORAGE_CONTAINER: ${AZURE_STORAGE_CONTAINER:-releases}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:80}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - release-manager

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL:-http://backend:8080}
        - KEYCLOAK_URL=${KEYCLOAK_URL:-http://keycloak:8080}
    image: release-manager-frontend:latest
    container_name: release-manager-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - release-manager

volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local

networks:
  release-manager:
    driver: bridge