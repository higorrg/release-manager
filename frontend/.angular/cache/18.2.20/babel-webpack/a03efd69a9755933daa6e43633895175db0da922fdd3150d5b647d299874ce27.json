{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject, signal, computed, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ReleaseService } from '../../core/services/release.service';\nlet ReleaseListComponent = class ReleaseListComponent {\n  releaseService = inject(ReleaseService);\n  router = inject(Router);\n  fb = inject(FormBuilder);\n  releases = signal([]);\n  loading = signal(true);\n  error = signal(null);\n  creating = signal(false);\n  showCreateForm = signal(false);\n  createForm = this.fb.group({\n    productName: ['', [Validators.required]],\n    version: ['', [Validators.required, Validators.pattern(/^\\d+\\.\\d+\\.\\d+$/)]]\n  });\n  availableStatuses = computed(() => this.releaseService.getAvailableStatuses());\n  statusDisplayNames = computed(() => this.releaseService.getStatusDisplayNames());\n  ngOnInit() {\n    this.loadReleases();\n  }\n  loadReleases() {\n    this.loading.set(true);\n    this.error.set(null);\n    // Simulating API call since we don't have a list endpoint yet\n    // In real implementation, this would call releaseService.getAllReleases()\n    setTimeout(() => {\n      this.releases.set([]);\n      this.loading.set(false);\n    }, 1000);\n  }\n  toggleCreateForm() {\n    this.showCreateForm.update(show => !show);\n    if (!this.showCreateForm()) {\n      this.createForm.reset();\n    }\n  }\n  createRelease() {\n    if (this.createForm.valid) {\n      this.creating.set(true);\n      const request = {\n        productName: this.createForm.value.productName,\n        version: this.createForm.value.version\n      };\n      this.releaseService.createReleaseFromPipeline(request).subscribe({\n        next: release => {\n          this.releases.update(releases => [release, ...releases]);\n          this.createForm.reset();\n          this.showCreateForm.set(false);\n          this.creating.set(false);\n        },\n        error: error => {\n          this.error.set('Erro ao criar release: ' + (error.error?.message || error.message));\n          this.creating.set(false);\n        }\n      });\n    }\n  }\n  updateStatus(release, event) {\n    const newStatus = event.target.value;\n    if (newStatus !== release.status) {\n      const request = {\n        status: newStatus\n      };\n      this.releaseService.updateReleaseStatus(release.id, request).subscribe({\n        next: updatedRelease => {\n          this.releases.update(releases => releases.map(r => r.id === release.id ? updatedRelease : r));\n        },\n        error: error => {\n          this.error.set('Erro ao atualizar status: ' + (error.error?.message || error.message));\n          // Reset select to original value\n          event.target.value = release.status;\n        }\n      });\n    }\n  }\n  viewDetails(releaseId) {\n    this.router.navigate(['/releases', releaseId]);\n  }\n  viewHistory(releaseId) {\n    this.router.navigate(['/releases', releaseId, 'history']);\n  }\n  getStatusClass(status) {\n    const statusMap = {\n      'MR_APROVADO': 'status-mr-aprovado',\n      'PARA_TESTE_SISTEMA': 'status-para-teste',\n      'PARA_TESTE_REGRESSIVO': 'status-para-teste',\n      'APROVADA_TESTE': 'status-aprovada',\n      'APROVADA_TESTE_REGRESSIVO': 'status-aprovada',\n      'REPROVADA_TESTE': 'status-reprovada',\n      'REPROVADA_TESTE_REGRESSIVO': 'status-reprovada',\n      'FALHA_BUILD_TESTE': 'status-falha',\n      'FALHA_BUILD_PRODUCAO': 'status-falha',\n      'FALHA_INSTALACAO_ESTAVEL': 'status-falha',\n      'CONTROLADA': 'status-controlada',\n      'DISPONIVEL': 'status-disponivel',\n      'REVOGADA': 'status-revogada'\n    };\n    return statusMap[status] || 'status-mr-aprovado';\n  }\n  getStatusDisplayName(status) {\n    return this.statusDisplayNames()[status];\n  }\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleString('pt-BR');\n  }\n};\nReleaseListComponent = __decorate([Component({\n  selector: 'app-release-list',\n  template: `\n    <div class=\"release-list-container\">\n      <div class=\"header\">\n        <h2>Gerenciamento de Releases</h2>\n        <button \n          (click)=\"toggleCreateForm()\" \n          class=\"btn btn-primary\"\n          [class.active]=\"showCreateForm()\">\n          {{ showCreateForm() ? 'Cancelar' : 'Nova Release' }}\n        </button>\n      </div>\n\n      @if (showCreateForm()) {\n        <div class=\"create-form-card\">\n          <h3>Criar Nova Release</h3>\n          <form [formGroup]=\"createForm\" (ngSubmit)=\"createRelease()\">\n            <div class=\"form-group\">\n              <label for=\"productName\">Nome do Produto</label>\n              <input \n                id=\"productName\"\n                type=\"text\" \n                formControlName=\"productName\"\n                class=\"form-control\"\n                placeholder=\"Ex: Plataforma Shift\">\n              @if (createForm.get('productName')?.invalid && createForm.get('productName')?.touched) {\n                <div class=\"error-message\">Nome do produto é obrigatório</div>\n              }\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"version\">Versão</label>\n              <input \n                id=\"version\"\n                type=\"text\" \n                formControlName=\"version\"\n                class=\"form-control\"\n                placeholder=\"Ex: 1.2.3\">\n              @if (createForm.get('version')?.invalid && createForm.get('version')?.touched) {\n                <div class=\"error-message\">Versão é obrigatória (formato: x.y.z)</div>\n              }\n            </div>\n\n            <div class=\"form-actions\">\n              <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"createForm.invalid || creating()\">\n                {{ creating() ? 'Criando...' : 'Criar Release' }}\n              </button>\n              <button type=\"button\" (click)=\"toggleCreateForm()\" class=\"btn btn-secondary\">\n                Cancelar\n              </button>\n            </div>\n          </form>\n        </div>\n      }\n\n      @if (loading()) {\n        <div class=\"loading\">\n          <p>Carregando releases...</p>\n        </div>\n      } @else if (error()) {\n        <div class=\"error-card\">\n          <p>{{ error() }}</p>\n          <button (click)=\"loadReleases()\" class=\"btn btn-primary\">Tentar Novamente</button>\n        </div>\n      } @else {\n        <div class=\"releases-grid\">\n          @for (release of releases(); track release.id) {\n            <div class=\"release-card\">\n              <div class=\"release-header\">\n                <h3>{{ release.version }}</h3>\n                <span class=\"status-badge\" [class]=\"getStatusClass(release.status)\">\n                  {{ release.statusDisplayName }}\n                </span>\n              </div>\n\n              <div class=\"release-info\">\n                <p><strong>Criado em:</strong> {{ formatDate(release.createdAt) }}</p>\n                <p><strong>Atualizado em:</strong> {{ formatDate(release.updatedAt) }}</p>\n              </div>\n\n              <div class=\"status-update\">\n                <label>Alterar Status:</label>\n                <select \n                  [value]=\"release.status\" \n                  (change)=\"updateStatus(release, $event)\"\n                  class=\"status-select\">\n                  @for (status of availableStatuses(); track status) {\n                    <option [value]=\"status\">{{ getStatusDisplayName(status) }}</option>\n                  }\n                </select>\n              </div>\n\n              <div class=\"release-actions\">\n                <button (click)=\"viewDetails(release.id)\" class=\"btn btn-outline\">\n                  Ver Detalhes\n                </button>\n                <button (click)=\"viewHistory(release.id)\" class=\"btn btn-outline\">\n                  Histórico\n                </button>\n              </div>\n            </div>\n          }\n\n          @if (releases().length === 0) {\n            <div class=\"empty-state\">\n              <p>Nenhuma release encontrada</p>\n              <p>Crie sua primeira release usando o botão \"Nova Release\"</p>\n            </div>\n          }\n        </div>\n      }\n    </div>\n  `,\n  styles: [`\n    .release-list-container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n\n    .header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 30px;\n    }\n\n    .header h2 {\n      margin: 0;\n      color: #2c3e50;\n    }\n\n    .btn {\n      padding: 10px 16px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.3s;\n      text-decoration: none;\n      display: inline-block;\n    }\n\n    .btn-primary {\n      background: #3498db;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #2980b9;\n    }\n\n    .btn-primary.active {\n      background: #e74c3c;\n    }\n\n    .btn-secondary {\n      background: #95a5a6;\n      color: white;\n    }\n\n    .btn-secondary:hover {\n      background: #7f8c8d;\n    }\n\n    .btn-outline {\n      background: transparent;\n      color: #3498db;\n      border: 1px solid #3498db;\n    }\n\n    .btn-outline:hover {\n      background: #3498db;\n      color: white;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .create-form-card {\n      background: white;\n      padding: 24px;\n      border-radius: 8px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      margin-bottom: 30px;\n      border: 1px solid #e1e8ed;\n    }\n\n    .create-form-card h3 {\n      margin: 0 0 20px 0;\n      color: #2c3e50;\n    }\n\n    .form-group {\n      margin-bottom: 16px;\n    }\n\n    .form-group label {\n      display: block;\n      margin-bottom: 4px;\n      font-weight: 500;\n      color: #2c3e50;\n    }\n\n    .form-control {\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 14px;\n      box-sizing: border-box;\n    }\n\n    .form-control:focus {\n      outline: none;\n      border-color: #3498db;\n      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n    }\n\n    .error-message {\n      color: #e74c3c;\n      font-size: 12px;\n      margin-top: 4px;\n    }\n\n    .form-actions {\n      display: flex;\n      gap: 12px;\n      margin-top: 20px;\n    }\n\n    .loading {\n      text-align: center;\n      padding: 40px;\n      color: #7f8c8d;\n    }\n\n    .error-card {\n      background: #fff5f5;\n      border: 1px solid #fed7d7;\n      color: #e53e3e;\n      padding: 20px;\n      border-radius: 8px;\n      text-align: center;\n    }\n\n    .releases-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n      gap: 20px;\n    }\n\n    .release-card {\n      background: white;\n      border: 1px solid #e1e8ed;\n      border-radius: 8px;\n      padding: 20px;\n      transition: box-shadow 0.3s;\n    }\n\n    .release-card:hover {\n      box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    }\n\n    .release-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 16px;\n    }\n\n    .release-header h3 {\n      margin: 0;\n      color: #2c3e50;\n    }\n\n    .status-badge {\n      padding: 4px 8px;\n      border-radius: 12px;\n      font-size: 12px;\n      font-weight: 500;\n      text-transform: uppercase;\n    }\n\n    .status-mr-aprovado { background: #d1ecf1; color: #0c5460; }\n    .status-para-teste { background: #fff3cd; color: #856404; }\n    .status-aprovada { background: #d4edda; color: #155724; }\n    .status-reprovada { background: #f8d7da; color: #721c24; }\n    .status-falha { background: #f8d7da; color: #721c24; }\n    .status-controlada { background: #e2e3e5; color: #383d41; }\n    .status-disponivel { background: #d4edda; color: #155724; }\n    .status-revogada { background: #f8d7da; color: #721c24; }\n\n    .release-info {\n      margin-bottom: 16px;\n    }\n\n    .release-info p {\n      margin: 4px 0;\n      font-size: 14px;\n      color: #6c757d;\n    }\n\n    .status-update {\n      margin-bottom: 16px;\n    }\n\n    .status-update label {\n      display: block;\n      margin-bottom: 4px;\n      font-weight: 500;\n      color: #2c3e50;\n      font-size: 14px;\n    }\n\n    .status-select {\n      width: 100%;\n      padding: 6px 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 13px;\n    }\n\n    .release-actions {\n      display: flex;\n      gap: 8px;\n    }\n\n    .release-actions .btn {\n      flex: 1;\n      text-align: center;\n      font-size: 12px;\n      padding: 6px 8px;\n    }\n\n    .empty-state {\n      grid-column: 1 / -1;\n      text-align: center;\n      padding: 60px 20px;\n      color: #7f8c8d;\n    }\n\n    .empty-state p {\n      margin: 8px 0;\n    }\n  `],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], ReleaseListComponent);\nexport { ReleaseListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}