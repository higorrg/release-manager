{"ast":null,"code":"import _asyncToGenerator from \"/home/higor/workspace/release-manager/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { signal } from '@angular/core';\nimport Keycloak from 'keycloak-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    router;\n    keycloak;\n    authenticated = signal(false);\n    userProfile = signal(null);\n    constructor(router) {\n      this.router = router;\n    }\n    init() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this.keycloak = new Keycloak({\n            url: 'http://localhost:8080',\n            realm: 'release-manager',\n            clientId: 'release-manager-frontend'\n          });\n          const authenticated = yield _this.keycloak.init({\n            onLoad: 'check-sso',\n            silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n            checkLoginIframe: false\n          });\n          _this.authenticated.set(authenticated);\n          if (authenticated) {\n            yield _this.loadUserProfile();\n            _this.setupTokenRefresh();\n          }\n        } catch (error) {\n          console.error('Failed to initialize Keycloak:', error);\n        }\n      })();\n    }\n    isAuthenticated() {\n      return this.authenticated();\n    }\n    getUserName() {\n      const profile = this.userProfile();\n      return profile?.firstName && profile?.lastName ? `${profile.firstName} ${profile.lastName}` : profile?.username || 'Usuário';\n    }\n    getUserEmail() {\n      return this.userProfile()?.email || '';\n    }\n    getToken() {\n      return this.keycloak?.token;\n    }\n    hasRole(role) {\n      return this.keycloak?.hasRealmRole(role) || false;\n    }\n    login() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.keycloak.login({\n            redirectUri: window.location.origin\n          });\n        } catch (error) {\n          console.error('Failed to login:', error);\n        }\n      })();\n    }\n    logout() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this3.keycloak.logout({\n            redirectUri: window.location.origin\n          });\n        } catch (error) {\n          console.error('Failed to logout:', error);\n        }\n      })();\n    }\n    loadUserProfile() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const profile = yield _this4.keycloak.loadUserProfile();\n          _this4.userProfile.set(profile);\n        } catch (error) {\n          console.error('Failed to load user profile:', error);\n        }\n      })();\n    }\n    setupTokenRefresh() {\n      var _this5 = this;\n      // Refresh token when it's about to expire (30 seconds before)\n      setInterval(/*#__PURE__*/_asyncToGenerator(function* () {\n        try {\n          const refreshed = yield _this5.keycloak.updateToken(30);\n          if (refreshed) {\n            console.log('Token refreshed');\n          }\n        } catch (error) {\n          console.error('Failed to refresh token:', error);\n          _this5.authenticated.set(false);\n          _this5.router.navigate(['/']);\n        }\n      }), 30000); // Check every 30 seconds\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}