{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject, signal, computed, effect } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ReleaseService } from '../../services/release.service';\nlet ReleaseDetailComponent = class ReleaseDetailComponent {\n  route = inject(ActivatedRoute);\n  router = inject(Router);\n  fb = inject(FormBuilder);\n  releaseService = inject(ReleaseService);\n  release = signal(null);\n  loading = signal(true);\n  error = signal(null);\n  updating = signal(false);\n  showAddClient = false;\n  availableStatuses = ['MR Aprovado', 'Falha no Build para Teste', 'Para Teste de Sistema', 'Reprovada no teste', 'Aprovada no teste', 'Falha no Build para Produção', 'Para Teste Regressivo', 'Falha na instalação da Estável', 'Interno', 'Revogada', 'Reprovada no teste regressivo', 'Aprovada no teste regressivo', 'Controlada', 'Disponível'];\n  statusForm = this.fb.group({\n    status: ['', Validators.required],\n    notes: ['']\n  });\n  releaseNotesForm = this.fb.group({\n    releaseNotes: ['']\n  });\n  prerequisitesForm = this.fb.group({\n    prerequisites: ['']\n  });\n  clientForm = this.fb.group({\n    clientCode: ['', Validators.required],\n    environment: ['', Validators.required]\n  });\n  statusClass = computed(() => {\n    const status = this.release()?.status;\n    if (!status) return '';\n    if (status.includes('Aprovad')) return 'approved';\n    if (status.includes('Falha') || status.includes('Reprovad')) return 'failed';\n    return 'pending';\n  });\n  constructor() {\n    effect(() => {\n      const id = this.route.snapshot.params['id'];\n      if (id) {\n        this.loadRelease(id);\n      }\n    });\n  }\n  loadRelease(id) {\n    this.loading.set(true);\n    this.error.set(null);\n    this.releaseService.getRelease(id).subscribe({\n      next: release => {\n        this.release.set(release);\n        this.releaseNotesForm.patchValue({\n          releaseNotes: release.releaseNotes || ''\n        });\n        this.prerequisitesForm.patchValue({\n          prerequisites: release.prerequisites || ''\n        });\n        this.loading.set(false);\n      },\n      error: err => {\n        this.error.set('Erro ao carregar release: ' + err.message);\n        this.loading.set(false);\n      }\n    });\n  }\n  updateStatus() {\n    if (!this.statusForm.valid || !this.release()) return;\n    this.updating.set(true);\n    const {\n      status,\n      notes\n    } = this.statusForm.value;\n    this.releaseService.updateReleaseStatus(this.release().id, status, notes || undefined).subscribe({\n      next: updatedRelease => {\n        this.release.set(updatedRelease);\n        this.statusForm.reset();\n        this.updating.set(false);\n      },\n      error: err => {\n        this.error.set('Erro ao atualizar status: ' + err.message);\n        this.updating.set(false);\n      }\n    });\n  }\n  updateReleaseNotes() {\n    if (!this.releaseNotesForm.dirty || !this.release()) return;\n    this.updating.set(true);\n    const {\n      releaseNotes\n    } = this.releaseNotesForm.value;\n    this.releaseService.updateReleaseNotes(this.release().id, releaseNotes || '').subscribe({\n      next: updatedRelease => {\n        this.release.set(updatedRelease);\n        this.releaseNotesForm.markAsPristine();\n        this.updating.set(false);\n      },\n      error: err => {\n        this.error.set('Erro ao atualizar release notes: ' + err.message);\n        this.updating.set(false);\n      }\n    });\n  }\n  updatePrerequisites() {\n    if (!this.prerequisitesForm.dirty || !this.release()) return;\n    this.updating.set(true);\n    const {\n      prerequisites\n    } = this.prerequisitesForm.value;\n    this.releaseService.updatePrerequisites(this.release().id, prerequisites || '').subscribe({\n      next: updatedRelease => {\n        this.release.set(updatedRelease);\n        this.prerequisitesForm.markAsPristine();\n        this.updating.set(false);\n      },\n      error: err => {\n        this.error.set('Erro ao atualizar pré-requisitos: ' + err.message);\n        this.updating.set(false);\n      }\n    });\n  }\n  addClient() {\n    if (!this.clientForm.valid || !this.release()) return;\n    this.updating.set(true);\n    const {\n      clientCode,\n      environment\n    } = this.clientForm.value;\n    this.releaseService.addControlledClient(this.release().id, clientCode, environment).subscribe({\n      next: updatedRelease => {\n        this.release.set(updatedRelease);\n        this.clientForm.reset();\n        this.showAddClient = false;\n        this.updating.set(false);\n      },\n      error: err => {\n        this.error.set('Erro ao adicionar cliente: ' + err.message);\n        this.updating.set(false);\n      }\n    });\n  }\n  removeClient(clientId) {\n    if (!this.release()) return;\n    this.updating.set(true);\n    this.releaseService.removeControlledClient(this.release().id, clientId).subscribe({\n      next: updatedRelease => {\n        this.release.set(updatedRelease);\n        this.updating.set(false);\n      },\n      error: err => {\n        this.error.set('Erro ao remover cliente: ' + err.message);\n        this.updating.set(false);\n      }\n    });\n  }\n  navigateBack() {\n    this.router.navigate(['/releases']);\n  }\n  formatDate(date) {\n    if (!date) return '-';\n    return new Date(date).toLocaleString('pt-BR');\n  }\n};\nReleaseDetailComponent = __decorate([Component({\n  selector: 'app-release-detail',\n  imports: [CommonModule, ReactiveFormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"release-detail-container\">\n      @if (loading()) {\n        <div class=\"loading\">Carregando...</div>\n      } @else if (error()) {\n        <div class=\"error\">{{ error() }}</div>\n      } @else if (release()) {\n        <div class=\"release-header\">\n          <h1>{{ release()?.product }} - v{{ release()?.version }}</h1>\n          <button class=\"btn-back\" (click)=\"navigateBack()\">Voltar</button>\n        </div>\n\n        <div class=\"release-content\">\n          <section class=\"release-info\">\n            <h2>Informações da Release</h2>\n            <div class=\"info-grid\">\n              <div class=\"info-item\">\n                <label>Produto:</label>\n                <span>{{ release()?.product }}</span>\n              </div>\n              <div class=\"info-item\">\n                <label>Versão:</label>\n                <span>{{ release()?.version }}</span>\n              </div>\n              <div class=\"info-item\">\n                <label>Status Atual:</label>\n                <span [class.status]=\"true\" [class]=\"'status-' + statusClass()\">\n                  {{ release()?.status }}\n                </span>\n              </div>\n              <div class=\"info-item\">\n                <label>Data de Criação:</label>\n                <span>{{ formatDate(release()?.createdAt) }}</span>\n              </div>\n              <div class=\"info-item\">\n                <label>Última Atualização:</label>\n                <span>{{ formatDate(release()?.updatedAt) }}</span>\n              </div>\n            </div>\n          </section>\n\n          <section class=\"status-update\">\n            <h2>Alterar Status</h2>\n            <form [formGroup]=\"statusForm\" (ngSubmit)=\"updateStatus()\">\n              <div class=\"form-group\">\n                <label for=\"status\">Novo Status:</label>\n                <select id=\"status\" formControlName=\"status\" class=\"form-control\">\n                  <option value=\"\">Selecione um status</option>\n                  @for (status of availableStatuses; track status) {\n                    <option [value]=\"status\">{{ status }}</option>\n                  }\n                </select>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"notes\">Observações:</label>\n                <textarea \n                  id=\"notes\" \n                  formControlName=\"notes\" \n                  class=\"form-control\"\n                  rows=\"3\"\n                  placeholder=\"Adicione observações sobre a mudança de status (opcional)\">\n                </textarea>\n              </div>\n              <button \n                type=\"submit\" \n                class=\"btn btn-primary\" \n                [disabled]=\"!statusForm.valid || updating()\">\n                {{ updating() ? 'Atualizando...' : 'Atualizar Status' }}\n              </button>\n            </form>\n          </section>\n\n          <section class=\"release-notes\">\n            <h2>Release Notes</h2>\n            <form [formGroup]=\"releaseNotesForm\" (ngSubmit)=\"updateReleaseNotes()\">\n              <div class=\"form-group\">\n                <textarea \n                  formControlName=\"releaseNotes\" \n                  class=\"form-control\"\n                  rows=\"6\"\n                  placeholder=\"Digite as release notes...\">\n                </textarea>\n              </div>\n              <button \n                type=\"submit\" \n                class=\"btn btn-secondary\"\n                [disabled]=\"!releaseNotesForm.dirty || updating()\">\n                Salvar Release Notes\n              </button>\n            </form>\n          </section>\n\n          <section class=\"prerequisites\">\n            <h2>Pré-requisitos</h2>\n            <form [formGroup]=\"prerequisitesForm\" (ngSubmit)=\"updatePrerequisites()\">\n              <div class=\"form-group\">\n                <textarea \n                  formControlName=\"prerequisites\" \n                  class=\"form-control\"\n                  rows=\"6\"\n                  placeholder=\"Digite os pré-requisitos...\">\n                </textarea>\n              </div>\n              <button \n                type=\"submit\" \n                class=\"btn btn-secondary\"\n                [disabled]=\"!prerequisitesForm.dirty || updating()\">\n                Salvar Pré-requisitos\n              </button>\n            </form>\n          </section>\n\n          <section class=\"controlled-clients\">\n            <h2>Clientes em Controlado</h2>\n            <div class=\"clients-header\">\n              <button class=\"btn btn-add\" (click)=\"showAddClient = !showAddClient\">\n                Adicionar Cliente\n              </button>\n            </div>\n            \n            @if (showAddClient) {\n              <form [formGroup]=\"clientForm\" (ngSubmit)=\"addClient()\" class=\"add-client-form\">\n                <div class=\"form-row\">\n                  <div class=\"form-group\">\n                    <label for=\"clientCode\">Código do Cliente:</label>\n                    <input \n                      id=\"clientCode\" \n                      type=\"text\" \n                      formControlName=\"clientCode\" \n                      class=\"form-control\"\n                      placeholder=\"Ex: CLI001\">\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"environment\">Ambiente:</label>\n                    <select id=\"environment\" formControlName=\"environment\" class=\"form-control\">\n                      <option value=\"\">Selecione</option>\n                      <option value=\"homologacao\">Homologação</option>\n                      <option value=\"producao\">Produção</option>\n                    </select>\n                  </div>\n                  <button \n                    type=\"submit\" \n                    class=\"btn btn-primary\"\n                    [disabled]=\"!clientForm.valid || updating()\">\n                    Adicionar\n                  </button>\n                </div>\n              </form>\n            }\n\n            <div class=\"clients-list\">\n              @if (release()?.controlledClients && release()!.controlledClients.length > 0) {\n                <table class=\"clients-table\">\n                  <thead>\n                    <tr>\n                      <th>Código do Cliente</th>\n                      <th>Ambiente</th>\n                      <th>Ações</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    @for (client of release()!.controlledClients; track client.id) {\n                      <tr>\n                        <td>{{ client.clientCode }}</td>\n                        <td>{{ client.environment }}</td>\n                        <td>\n                          <button \n                            class=\"btn btn-danger btn-sm\"\n                            (click)=\"removeClient(client.id)\">\n                            Remover\n                          </button>\n                        </td>\n                      </tr>\n                    }\n                  </tbody>\n                </table>\n              } @else {\n                <p class=\"no-clients\">Nenhum cliente em controlado para esta release.</p>\n              }\n            </div>\n          </section>\n        </div>\n      }\n    </div>\n  `,\n  styles: [`\n    .release-detail-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .loading, .error {\n      text-align: center;\n      padding: 40px;\n      font-size: 18px;\n    }\n\n    .error {\n      color: #dc3545;\n    }\n\n    .release-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 30px;\n      padding-bottom: 20px;\n      border-bottom: 2px solid #e0e0e0;\n    }\n\n    .release-header h1 {\n      margin: 0;\n      color: #333;\n    }\n\n    .btn-back {\n      padding: 8px 16px;\n      background: #6c757d;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n\n    .btn-back:hover {\n      background: #5a6268;\n    }\n\n    .release-content {\n      display: grid;\n      gap: 30px;\n    }\n\n    section {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    section h2 {\n      margin-top: 0;\n      margin-bottom: 20px;\n      color: #495057;\n      font-size: 20px;\n    }\n\n    .info-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 20px;\n    }\n\n    .info-item {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .info-item label {\n      font-weight: 600;\n      color: #6c757d;\n      margin-bottom: 5px;\n    }\n\n    .info-item span {\n      color: #333;\n    }\n\n    .status {\n      padding: 4px 12px;\n      border-radius: 4px;\n      font-weight: 500;\n      display: inline-block;\n    }\n\n    .status-approved {\n      background: #d4edda;\n      color: #155724;\n    }\n\n    .status-pending {\n      background: #fff3cd;\n      color: #856404;\n    }\n\n    .status-failed {\n      background: #f8d7da;\n      color: #721c24;\n    }\n\n    .form-group {\n      margin-bottom: 15px;\n    }\n\n    .form-group label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: 500;\n      color: #495057;\n    }\n\n    .form-control {\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid #ced4da;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n\n    .form-control:focus {\n      outline: none;\n      border-color: #80bdff;\n      box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);\n    }\n\n    textarea.form-control {\n      resize: vertical;\n      font-family: inherit;\n    }\n\n    .btn {\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n      transition: background-color 0.2s;\n    }\n\n    .btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n    }\n\n    .btn-primary {\n      background: #007bff;\n      color: white;\n    }\n\n    .btn-primary:hover:not(:disabled) {\n      background: #0056b3;\n    }\n\n    .btn-secondary {\n      background: #6c757d;\n      color: white;\n    }\n\n    .btn-secondary:hover:not(:disabled) {\n      background: #5a6268;\n    }\n\n    .btn-danger {\n      background: #dc3545;\n      color: white;\n    }\n\n    .btn-danger:hover:not(:disabled) {\n      background: #c82333;\n    }\n\n    .btn-add {\n      background: #28a745;\n      color: white;\n    }\n\n    .btn-add:hover {\n      background: #218838;\n    }\n\n    .btn-sm {\n      padding: 4px 8px;\n      font-size: 12px;\n    }\n\n    .clients-header {\n      margin-bottom: 20px;\n    }\n\n    .add-client-form {\n      background: #f8f9fa;\n      padding: 15px;\n      border-radius: 4px;\n      margin-bottom: 20px;\n    }\n\n    .form-row {\n      display: grid;\n      grid-template-columns: 1fr 1fr auto;\n      gap: 15px;\n      align-items: end;\n    }\n\n    .clients-table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    .clients-table th,\n    .clients-table td {\n      padding: 12px;\n      text-align: left;\n      border-bottom: 1px solid #dee2e6;\n    }\n\n    .clients-table th {\n      background: #f8f9fa;\n      font-weight: 600;\n      color: #495057;\n    }\n\n    .clients-table tr:hover {\n      background: #f8f9fa;\n    }\n\n    .no-clients {\n      color: #6c757d;\n      text-align: center;\n      padding: 20px;\n    }\n  `]\n})], ReleaseDetailComponent);\nexport { ReleaseDetailComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}