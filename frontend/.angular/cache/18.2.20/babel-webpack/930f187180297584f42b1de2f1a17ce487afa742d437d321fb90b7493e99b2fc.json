{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport let ReleaseService = /*#__PURE__*/(() => {\n  class ReleaseService {\n    http = inject(HttpClient);\n    authService = inject(AuthService);\n    apiUrl = 'http://localhost:8081/api/v1/releases';\n    getHeaders() {\n      const token = this.authService.getAccessToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    }\n    createReleaseFromPipeline(request) {\n      return this.http.post(`${this.apiUrl}/pipeline`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    updateReleaseStatus(releaseId, status, notes) {\n      const request = {\n        status,\n        comments: notes\n      };\n      return this.http.put(`${this.apiUrl}/${releaseId}/status`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    updateReleaseNotes(releaseId, releaseNotes) {\n      const request = {\n        releaseNotes\n      };\n      return this.http.put(`${this.apiUrl}/${releaseId}/release-notes`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    updatePrerequisites(releaseId, prerequisites) {\n      const request = {\n        prerequisites\n      };\n      return this.http.put(`${this.apiUrl}/${releaseId}/prerequisites`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    getRelease(releaseId) {\n      return this.http.get(`${this.apiUrl}/${releaseId}`, {\n        headers: this.getHeaders()\n      });\n    }\n    getReleaseById(releaseId) {\n      return this.getRelease(releaseId);\n    }\n    getReleaseStatusHistory(releaseId) {\n      return this.http.get(`${this.apiUrl}/${releaseId}/history`, {\n        headers: this.getHeaders()\n      });\n    }\n    getAvailableStatuses() {\n      return ['MR Aprovado', 'Falha no Build para Teste', 'Para Teste de Sistema', 'Reprovada no teste', 'Aprovada no teste', 'Falha no Build para Produção', 'Para Teste Regressivo', 'Falha na instalação da Estável', 'Interno', 'Revogada', 'Reprovada no teste regressivo', 'Aprovada no teste regressivo', 'Controlada', 'Disponível'];\n    }\n    addControlledClient(releaseId, clientCode, environment) {\n      const request = {\n        clientCode,\n        environment\n      };\n      return this.http.post(`${this.apiUrl}/${releaseId}/controlled-clients`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    removeControlledClient(releaseId, clientId) {\n      return this.http.delete(`${this.apiUrl}/${releaseId}/controlled-clients/${clientId}`, {\n        headers: this.getHeaders()\n      });\n    }\n    static ɵfac = function ReleaseService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ReleaseService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReleaseService,\n      factory: ReleaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ReleaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}