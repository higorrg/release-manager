{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport var ReleaseStatus = /*#__PURE__*/function (ReleaseStatus) {\n  ReleaseStatus[\"MR_APROVADO\"] = \"MR_APROVADO\";\n  ReleaseStatus[\"FALHA_BUILD_TESTE\"] = \"FALHA_BUILD_TESTE\";\n  ReleaseStatus[\"PARA_TESTE_SISTEMA\"] = \"PARA_TESTE_SISTEMA\";\n  ReleaseStatus[\"REPROVADA_TESTE\"] = \"REPROVADA_TESTE\";\n  ReleaseStatus[\"APROVADA_TESTE\"] = \"APROVADA_TESTE\";\n  ReleaseStatus[\"FALHA_BUILD_PRODUCAO\"] = \"FALHA_BUILD_PRODUCAO\";\n  ReleaseStatus[\"PARA_TESTE_REGRESSIVO\"] = \"PARA_TESTE_REGRESSIVO\";\n  ReleaseStatus[\"FALHA_INSTALACAO_ESTAVEL\"] = \"FALHA_INSTALACAO_ESTAVEL\";\n  ReleaseStatus[\"INTERNO\"] = \"INTERNO\";\n  ReleaseStatus[\"REVOGADA\"] = \"REVOGADA\";\n  ReleaseStatus[\"REPROVADA_TESTE_REGRESSIVO\"] = \"REPROVADA_TESTE_REGRESSIVO\";\n  ReleaseStatus[\"APROVADA_TESTE_REGRESSIVO\"] = \"APROVADA_TESTE_REGRESSIVO\";\n  ReleaseStatus[\"CONTROLADA\"] = \"CONTROLADA\";\n  ReleaseStatus[\"DISPONIVEL\"] = \"DISPONIVEL\";\n  return ReleaseStatus;\n}(ReleaseStatus || {});\nexport let ReleaseService = /*#__PURE__*/(() => {\n  class ReleaseService {\n    http = inject(HttpClient);\n    authService = inject(AuthService);\n    apiUrl = 'http://localhost:8081/api/v1/releases';\n    getHeaders() {\n      const token = this.authService.getToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    }\n    createReleaseFromPipeline(request) {\n      return this.http.post(`${this.apiUrl}/pipeline`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    updateReleaseStatus(releaseId, request) {\n      return this.http.put(`${this.apiUrl}/${releaseId}/status`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    updateReleaseNotes(releaseId, request) {\n      return this.http.put(`${this.apiUrl}/${releaseId}/release-notes`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    updatePrerequisites(releaseId, request) {\n      return this.http.put(`${this.apiUrl}/${releaseId}/prerequisites`, request, {\n        headers: this.getHeaders()\n      });\n    }\n    getReleaseById(releaseId) {\n      return this.http.get(`${this.apiUrl}/${releaseId}`, {\n        headers: this.getHeaders()\n      });\n    }\n    getReleaseStatusHistory(releaseId) {\n      return this.http.get(`${this.apiUrl}/${releaseId}/history`, {\n        headers: this.getHeaders()\n      });\n    }\n    getStatusDisplayNames() {\n      return {\n        [ReleaseStatus.MR_APROVADO]: 'MR Aprovado',\n        [ReleaseStatus.FALHA_BUILD_TESTE]: 'Falha no Build para Teste',\n        [ReleaseStatus.PARA_TESTE_SISTEMA]: 'Para Teste de Sistema',\n        [ReleaseStatus.REPROVADA_TESTE]: 'Reprovada no teste',\n        [ReleaseStatus.APROVADA_TESTE]: 'Aprovada no teste',\n        [ReleaseStatus.FALHA_BUILD_PRODUCAO]: 'Falha no Build para Produção',\n        [ReleaseStatus.PARA_TESTE_REGRESSIVO]: 'Para Teste Regressivo',\n        [ReleaseStatus.FALHA_INSTALACAO_ESTAVEL]: 'Falha na instalação da Estável',\n        [ReleaseStatus.INTERNO]: 'Interno',\n        [ReleaseStatus.REVOGADA]: 'Revogada',\n        [ReleaseStatus.REPROVADA_TESTE_REGRESSIVO]: 'Reprovada no teste regressivo',\n        [ReleaseStatus.APROVADA_TESTE_REGRESSIVO]: 'Aprovada no teste regressivo',\n        [ReleaseStatus.CONTROLADA]: 'Controlada',\n        [ReleaseStatus.DISPONIVEL]: 'Disponível'\n      };\n    }\n    getAvailableStatuses() {\n      return Object.values(ReleaseStatus);\n    }\n    static ɵfac = function ReleaseService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ReleaseService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReleaseService,\n      factory: ReleaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ReleaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}